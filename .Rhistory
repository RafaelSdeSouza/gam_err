zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
data_test <- as.data.frame(cbind(Y, X1true, X2true))
b <- gam(Y~s(X1true,bs="cr",k=10)+s(X2true,bs="cr",k=10),data=data_test,method="REML")
summary(b)
par(mfrow=c(2,1))
plot(b,all.terms=TRUE,scheme=c(2,1))
# predict values on regular xy grid
grid.lines = 50
x1.pred <- seq(1.01*min(X1true), 0.99*max(X1true), length.out = grid.lines)
x2.pred <- seq(1.01*min(X2true), 0.99*max(X2true), length.out = grid.lines)
x1x2 <- expand.grid( X1true = x1.pred, X2true = x2.pred)
y.pred <- matrix(predict(b, newdata = x1x2,type="response"),
nrow = grid.lines, ncol = grid.lines)
y.true <- matrix(m1function(x1.pred) + m2function(x2.pred),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(b,type="response")
par(mfrow=c(1,2))
persp3D(x=x1.pred, y=x2.pred, z = y.true ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
#=== generating Y as an additive model
Y <- m1function(X1true) + m2function(X2true) + rnorm(n,mean=0,sd=.1)
#=== only W1 and W2 are observed
sd_u1 <- round(rnorm(n,mean=0.8,sd=0.2),2)
sd_u2 <- round(rnorm(n,mean=1,sd=0.2),2)
W1 <- sapply(X1true,rnorm,n=m,sd=sd_u1) #no replicates, m=1
W2 <- sapply(X2true,rnorm,n=m,sd=sd_u2) #no replicates, m=1
#### End of generating data
#### Testing gam function versus B-splines
data_test <- as.data.frame(cbind(Y, X1true, X2true))
b <- gam(Y~s(X1true,bs="cr",k=15)+s(X2true,bs="cr",k=15),data=data_test,method="REML")
summary(b)
par(mfrow=c(2,1))
plot(b,all.terms=TRUE,scheme=c(2,1))
# predict values on regular xy grid
grid.lines = 50
x1.pred <- seq(1.01*min(X1true), 0.99*max(X1true), length.out = grid.lines)
x2.pred <- seq(1.01*min(X2true), 0.99*max(X2true), length.out = grid.lines)
x1x2 <- expand.grid( X1true = x1.pred, X2true = x2.pred)
y.pred <- matrix(predict(b, newdata = x1x2,type="response"),
nrow = grid.lines, ncol = grid.lines)
y.true <- matrix(m1function(x1.pred) + m2function(x2.pred),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(b,type="response")
par(mfrow=c(1,2))
persp3D(x=x1.pred, y=x2.pred, z = y.true ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
rnorm(n,mean=0,sd=.1)
#=== generating Y as an additive model
Y <- m1function(X1true) + m2function(X2true) + rnorm(n,mean=0,sd=.01)
#=== only W1 and W2 are observed
sd_u1 <- round(rnorm(n,mean=0.8,sd=0.2),2)
sd_u2 <- round(rnorm(n,mean=1,sd=0.2),2)
W1 <- sapply(X1true,rnorm,n=m,sd=sd_u1) #no replicates, m=1
W2 <- sapply(X2true,rnorm,n=m,sd=sd_u2) #no replicates, m=1
#### End of generating data
#### Testing gam function versus B-splines
data_test <- as.data.frame(cbind(Y, X1true, X2true))
b <- gam(Y~s(X1true,bs="cr",k=15)+s(X2true,bs="cr",k=15),data=data_test,method="REML")
summary(b)
par(mfrow=c(2,1))
plot(b,all.terms=TRUE,scheme=c(2,1))
# predict values on regular xy grid
grid.lines = 50
x1.pred <- seq(1.01*min(X1true), 0.99*max(X1true), length.out = grid.lines)
x2.pred <- seq(1.01*min(X2true), 0.99*max(X2true), length.out = grid.lines)
x1x2 <- expand.grid( X1true = x1.pred, X2true = x2.pred)
y.pred <- matrix(predict(b, newdata = x1x2,type="response"),
nrow = grid.lines, ncol = grid.lines)
y.true <- matrix(m1function(x1.pred) + m2function(x2.pred),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(b,type="response")
par(mfrow=c(1,2))
persp3D(x=x1.pred, y=x2.pred, z = y.true ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
GRID <- 200
#=== true X's
X1true <- sort(rnorm(n,0,10))
X2true <- sort(rnorm(n,3,10))
#=== true functions
m1function <- function(x){
f <- sin(pi*(x/2))/(1+(2*(x^2)*(sign(x)+1)))
return(f)}
m2function <- function(x){
f <- (1/2)*exp(-(1/2)*((x-3)^2))
return(f)}
par(mfrow=c(1,2))
plot(X1true,m1function(X1true),type="l")
plot(X2true,m2function(X2true),type="l")
#=== generating Y as an additive model
Y <- m1function(X1true) + m2function(X2true) + rnorm(n,mean=0,sd=.01)
#=== only W1 and W2 are observed
sd_u1 <- round(rnorm(n,mean=0.8,sd=0.2),2)
sd_u2 <- round(rnorm(n,mean=1,sd=0.2),2)
W1 <- sapply(X1true,rnorm,n=m,sd=sd_u1) #no replicates, m=1
W2 <- sapply(X2true,rnorm,n=m,sd=sd_u2) #no replicates, m=1
#### End of generating data
#### Testing gam function versus B-splines
data_test <- as.data.frame(cbind(Y, X1true, X2true))
b <- gam(Y~s(X1true,bs="cr",k=15)+s(X2true,bs="cr",k=15),data=data_test,method="REML")
summary(b)
par(mfrow=c(2,1))
plot(b,all.terms=TRUE,scheme=c(2,1))
# predict values on regular xy grid
grid.lines = 50
x1.pred <- seq(1.01*min(X1true), 0.99*max(X1true), length.out = grid.lines)
x2.pred <- seq(1.01*min(X2true), 0.99*max(X2true), length.out = grid.lines)
x1x2 <- expand.grid( X1true = x1.pred, X2true = x2.pred)
y.pred <- matrix(predict(b, newdata = x1x2,type="response"),
nrow = grid.lines, ncol = grid.lines)
y.true <- matrix(m1function(x1.pred) + m2function(x2.pred),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(b,type="response")
par(mfrow=c(1,2))
persp3D(x=x1.pred, y=x2.pred, z = y.true ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
set.seed(30)
n <- 1000
m <- 1 ## no replicates
k <- 30
GRID <- 200
#=== true X's
X1true <- sort(rnorm(n,0,1))
X2true <- sort(rnorm(n,3,1))
#=== true functions
m1function <- function(x){
f <- sin(pi*(x/2))/(1+(2*(x^2)*(sign(x)+1)))
return(f)}
m2function <- function(x){
f <- (x-3)^2)
return(f)}
par(mfrow=c(1,2))
plot(X1true,m1function(X1true),type="l")
plot(X2true,m2function(X2true),type="l")
#=== generating Y as an additive model
Y <- m1function(X1true) + m2function(X2true) + rnorm(n,mean=0,sd=.01)
#=== only W1 and W2 are observed
sd_u1 <- round(rnorm(n,mean=0.8,sd=0.2),2)
sd_u2 <- round(rnorm(n,mean=1,sd=0.2),2)
W1 <- sapply(X1true,rnorm,n=m,sd=sd_u1) #no replicates, m=1
W2 <- sapply(X2true,rnorm,n=m,sd=sd_u2) #no replicates, m=1
#### End of generating data
#### Testing gam function versus B-splines
data_test <- as.data.frame(cbind(Y, X1true, X2true))
b <- gam(Y~s(X1true,bs="cr",k=15)+s(X2true,bs="cr",k=15),data=data_test,method="REML")
summary(b)
par(mfrow=c(2,1))
plot(b,all.terms=TRUE,scheme=c(2,1))
# predict values on regular xy grid
grid.lines = 50
x1.pred <- seq(1.01*min(X1true), 0.99*max(X1true), length.out = grid.lines)
x2.pred <- seq(1.01*min(X2true), 0.99*max(X2true), length.out = grid.lines)
x1x2 <- expand.grid( X1true = x1.pred, X2true = x2.pred)
y.pred <- matrix(predict(b, newdata = x1x2,type="response"),
nrow = grid.lines, ncol = grid.lines)
y.true <- matrix(m1function(x1.pred) + m2function(x2.pred),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(b,type="response")
par(mfrow=c(1,2))
persp3D(x=x1.pred, y=x2.pred, z = y.true ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
set.seed(30)
n <- 1000
m <- 1 ## no replicates
k <- 30
GRID <- 200
#=== true X's
X1true <- sort(rnorm(n,0,1))
X2true <- sort(rnorm(n,3,1))
#=== true functions
m1function <- function(x){
f <- sin(pi*(x/2))/(1+(2*(x^2)*(sign(x)+1)))
return(f)}
m2function <- function(x){
f <- (x-3)^2
return(f)}
par(mfrow=c(1,2))
plot(X1true,m1function(X1true),type="l")
plot(X2true,m2function(X2true),type="l")
#=== generating Y as an additive model
Y <- m1function(X1true) + m2function(X2true) + rnorm(n,mean=0,sd=.01)
#=== only W1 and W2 are observed
sd_u1 <- round(rnorm(n,mean=0.8,sd=0.2),2)
sd_u2 <- round(rnorm(n,mean=1,sd=0.2),2)
W1 <- sapply(X1true,rnorm,n=m,sd=sd_u1) #no replicates, m=1
W2 <- sapply(X2true,rnorm,n=m,sd=sd_u2) #no replicates, m=1
#### End of generating data
#### Testing gam function versus B-splines
data_test <- as.data.frame(cbind(Y, X1true, X2true))
b <- gam(Y~s(X1true,bs="cr",k=15)+s(X2true,bs="cr",k=15),data=data_test,method="REML")
summary(b)
par(mfrow=c(2,1))
plot(b,all.terms=TRUE,scheme=c(2,1))
# predict values on regular xy grid
grid.lines = 50
x1.pred <- seq(1.01*min(X1true), 0.99*max(X1true), length.out = grid.lines)
x2.pred <- seq(1.01*min(X2true), 0.99*max(X2true), length.out = grid.lines)
x1x2 <- expand.grid( X1true = x1.pred, X2true = x2.pred)
y.pred <- matrix(predict(b, newdata = x1x2,type="response"),
nrow = grid.lines, ncol = grid.lines)
y.true <- matrix(m1function(x1.pred) + m2function(x2.pred),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(b,type="response")
par(mfrow=c(1,2))
persp3D(x=x1.pred, y=x2.pred, z = y.true ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
y.true <- matrix(m1function(x1x2$X1true) + m2function(x1x2$X2true),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(b,type="response")
par(mfrow=c(1,2))
persp3D(x=x1.pred, y=x2.pred, z = y.true ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
par(mfrow=c(2,1))
plot(b,all.terms=TRUE,scheme=c(2,1))
par(mfrow=c(1,2))
plot(X1true,m1function(X1true),type="l")
plot(X2true,m2function(X2true),type="l")
par(mfrow=c(2,2))
plot(X1true,m1function(X1true),type="l")
plot(X2true,m2function(X2true),type="l")
plot(b,all.terms=TRUE,scheme=c(2,1))
# predict values on regular xy grid
grid.lines = 50
x1.pred <- seq(1.01*min(X1true), 0.99*max(X1true), length.out = grid.lines)
x2.pred <- seq(1.01*min(X2true), 0.99*max(X2true), length.out = grid.lines)
x1x2 <- expand.grid( X1true = x1.pred, X2true = x2.pred)
y.pred <- matrix(predict(b, newdata = x1x2,type="response"),
nrow = grid.lines, ncol = grid.lines)
y.true <- matrix(m1function(x1x2$X1true) + m2function(x1x2$X2true),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(b,type="response")
par(mfrow=c(1,2))
persp3D(x=x1.pred, y=x2.pred, z = y.true ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
setwd("~/Documents/GitHub/gam_err")
require(mgcv)
require(rjags)
require(R2jags)
require(visreg)
require(ggplot2)
require(fda)
source("jagsresults.R")
#####################
## Generating data ##
#####################
set.seed(42)
nobs <- 200
sdobsx <- 0.1
truex <- sort(rnorm(nobs,0,2)) # true covariate
errx <- abs(rnorm(nobs,0,sdobsx)) # measurement errors of known variance
obsx <- rnorm(nobs,truex, errx) # observed covariate
sdy <- 0.3 # intrinsic scatter around truey
mfunction <- function(x){
f <- sin(pi*(x/2))/(1+(2*(x^2)*(sign(x)+1)))
return(f)}
xb <- mfunction(truex) # non-linear predictor
Y <- rnorm(nobs, xb, sdy) # true y, for now ignoring measurement errors in Y
dat <- data.frame(x=obsx,y=Y)
#### End of generating data
Xmat<- gam(y ~ s(x),data=dat,k=10)
visreg(Xmat)
#bks <- quantile(obsx, seq(0, 1, length=50))
#Bspi <- create.bspline.basis(range(obsx), norder=4,breaks=bks)
#Xmat <-  getbasismatrix(obsx, basisobj, nderiv=0)
Xmat <- bs(obsx, df=10,intercept=T,degree = 3)
#xx <- seq(min(obsx),max(obsx),length.out = 200)
#XXmat <- bs(xx, df=10,intercept=T,degree = 3)
jags.dat <- list( n = nobs,
y = Y,
X = Xmat
)
load.module("glm") ## improved samplers for GLMs often worth loading
Model <- "model{
mu <- X %*% b ## expected response
for (i in 1:n) {
y[i] ~ dnorm(mu[i],tau)
}
## response
scale <- 1/tau ## convert tau to standard GLM scale
tau ~ dgamma(.05,.005) ## precision parameter prior
## Parametric effect priors CHECK tau=1/79^2 is appropriate!
for (i in 1:1) { b[i] ~ dnorm(0,0.00011) }
## prior for s(x)...
for (i in 2:9) { b[i] ~ dnorm(0, lambda[1]) }
for (i in 10:10) { b[i] ~ dnorm(0, lambda[2]) }
## smoothing parameter priors CHECK...
for (i in 1:2) {
lambda[i] ~ dgamma(.05,.005)
}
}"
jm  <- jags(data = jags.dat,
parameters.to.save=c("mu"),
model.file = textConnection(Model),
n.chains=3,
n.iter=1000,
n.burnin=500)
fit <- jagsresults(x = jm, params = c("mu"),probs = c(0.16, 0.5, 0.84))
fit_data <- data.frame(x=obsx,mean=fit[,"50%"],lwr1=fit[,"16%"],upr1=fit[,"84%"])
ggplot(data=dat,aes(x=x,y=y)) +
geom_point() +
geom_ribbon(data=fit_data,aes(x=x,ymin=lwr1, ymax=upr1,y=NULL),fill=c("gray50"),alpha=0.5) +
geom_line(data=fit_data,aes(x=x,y=mean),color="cyan2") +
theme_bw()
library(fda)
library(mgcv)
library(Matrix)
require("plot3D")
#####################
## Generating data ##
#####################
set.seed(30)
n <- 1000
m <- 1 ## no replicates
k <- 30
GRID <- 200
#=== true X's
X1true <- sort(rnorm(n,0,1))
X2true <- sort(rnorm(n,3,1))
#=== true functions
m1function <- function(x){
f <- sin(pi*(x/2))/(1+(2*(x^2)*(sign(x)+1)))
return(f)}
m2function <- function(x){
f <- (x-3)^2
return(f)}
par(mfrow=c(2,1))
plot(X1true,m1function(X1true),type="l")
plot(X2true,m2function(X2true),type="l")
#=== generating Y as an additive model
Y <- m1function(X1true) + m2function(X2true) + rnorm(n,mean=0,sd=.01)
#=== only W1 and W2 are observed
sd_u1 <- round(rnorm(n,mean=0.8,sd=0.2),2)
sd_u2 <- round(rnorm(n,mean=1,sd=0.2),2)
W1 <- sapply(X1true,rnorm,n=m,sd=sd_u1) #no replicates, m=1
W2 <- sapply(X2true,rnorm,n=m,sd=sd_u2) #no replicates, m=1
#### End of generating data
#### Testing gam function versus B-splines
data_test <- as.data.frame(cbind(Y, X1true, X2true))
b <- gam(Y~s(X1true,bs="cr",k=15)+s(X2true,bs="cr",k=15),data=data_test,method="REML")
summary(b)
par(mfrow=c(2,2))
plot(X1true,m1function(X1true),type="l")
plot(X2true,m2function(X2true),type="l")
plot(b,all.terms=TRUE,scheme=c(2,1))
# predict values on regular xy grid
grid.lines = 50
x1.pred <- seq(1.01*min(X1true), 0.99*max(X1true), length.out = grid.lines)
x2.pred <- seq(1.01*min(X2true), 0.99*max(X2true), length.out = grid.lines)
x1x2 <- expand.grid( X1true = x1.pred, X2true = x2.pred)
y.pred <- matrix(predict(b, newdata = x1x2,type="response"),
nrow = grid.lines, ncol = grid.lines)
y.true <- matrix(m1function(x1x2$X1true) + m2function(x1x2$X2true),
nrow = grid.lines, ncol = grid.lines)
# fitted points for droplines to surface
fitpoints <- predict(b,type="response")
par(mfrow=c(1,2))
persp3D(x=x1.pred, y=x2.pred, z = y.true ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
persp3D(x=x1.pred, y=x2.pred, z= y.pred ,   cex = 1, cex.lab=1.5,type="p",pch = 19,alpha=0.5,
theta = 30, phi = 30, ticktype = "detailed",col="red",bty = "b2",
xlab="x1",
ylab="x2",
zlab="y")
range(X1true)
1.1*range(X1true)
Bbasis_obj_1 <- create.bsplines.f(knots=create.knots(x=X1true,k=30),range=c(-5,5),order=4)
Bbasis_obj_2 <- create.bsplines.f(knots=create.knots(x=X2true,k=30),range=c(-0.5,6.6),order=4)
plot(Bbasis_obj_1)
plot(Bbasis_obj_2)
library(fda)
library(mgcv)
library(Matrix)
create.bsplines.f <- function(knots,range,order){
Bbasis_obj <- create.bspline.basis(rangeval=range, norder=order, breaks=knots)
return(Bbasis_obj)
}
create.knots <- function(x,k){
Quantiles <- round(seq(from=0,to=1,length=k+2),4)[-c(1,k+2)]
KNOTS <- as.vector(quantile(x,probs=Quantiles))
return(KNOTS)
}
Bbasis_obj_1 <- create.bsplines.f(knots=create.knots(x=X1true,k=30),range=c(-5,5),order=4)
Bbasis_obj_2 <- create.bsplines.f(knots=create.knots(x=X2true,k=30),range=c(-0.5,6.6),order=4)
plot(Bbasis_obj_1)
plot(Bbasis_obj_2)
eval.Bbasis <- function(x,Bbasis_obj){
B <- getbasismatrix(x, Bbasis_obj, nderiv=0)
return(B)
}
eval.Bbasis
eval.Bbasis(X1true,Bbasis_obj_1)
B1 <- eval.Bbasis(X1true,Bbasis_obj_1)
B2 <- eval.Bbasis(X2true,Bbasis_obj_2)
D1 <- getbasispenalty(Bbasis_obj_1, Lfdobj=int2Lfd(2))
D2 <- getbasispenalty(Bbasis_obj_2, Lfdobj=int2Lfd(2))
Penalty_array <- array( c( D1 , D2) , dim = c( dim(D1)[1] , dim(D1)[2] , 2 ) )
DB_matrix <- cbind(B1,B2)
alpha <- c(0.2,0.8)
beta_estimation <- function(y,DB_matrix, penalty_matrices, alpha){
diag_term <- bdiag(alpha[1]*penalty_matrices[,,1],alpha[2]*penalty_matrices[,,2])
beta <- solve(((t(DB_matrix)%*%DB_matrix)+(diag_term)))%*%t(DB_matrix)%*%y
}
beta
B2
beta_estimation <- function(y,DB_matrix, penalty_matrices, alpha){
diag_term <- bdiag(alpha[1]*penalty_matrices[,,1],alpha[2]*penalty_matrices[,,2])
beta <- solve(((t(DB_matrix)%*%DB_matrix)+(diag_term)))%*%t(DB_matrix)%*%y
return(beta)
}
beta_estimation(y,DB_matrix, penalty_matrices, alpha)
beta_estimation(y,DB_matrix, Penalty_array, alpha)
beta_estimation(Y,DB_matrix, Penalty_array, alpha)
beta <- beta_estimation(Y,DB_matrix, Penalty_array, alpha)
fit2 <- B2%*%beta[33:64,1]
plot(X2true,m2function(X2true))
lines(X2true,fit2)
fit1 <- B2%*%beta[1:32,1]
plot(X2true,m1function(X1true))
lines(X2true,fit1)
fit2 <- B2%*%beta[33:64,1]
plot(X2true,m2function(X2true))
lines(X2true,fit2)
fit1 <- B2%*%beta[1:32,1]
plot(X2true,m1function(X1true))
lines(X1true,fit1)
fit2 <- B2%*%beta[33:64,1]
plot(X2true,m2function(X2true))
lines(X2true,fit2)
fit1 <- B2%*%beta[1:32,1]
plot(X1true,m1function(X1true))
lines(X1true,fit1)
Penalty_array
cor(iris[,1:2])
